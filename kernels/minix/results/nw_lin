#!/usr/bin/perl
#use warnings;
use Data::Dumper;
use Storable;
#use Term::ProgressBar 2.00;

sub pear 
{
 my @x = @{$_[0]};
 my @y = @{$_[1]};
 $#x == $#y or die;
 my $n = $#x;
 my $sum_xy = 0, $sum_x = 0, $sum_y = 0, $sum2_x = 0, $sum2_y = 0;
 for my $i (0..$n-1)
 {
	 $sum_xy += $x[$i]*$y[$i];
	 $sum_x += $x[$i];
	 $sum_y += $y[$i];
	 $sum2_x += $x[$i]*$x[$i];
	 $sum2_y += $y[$i]*$y[$i];
 }
 my $mean_x = $sum_x / $n;
 my $mean_y = $sum_y / $n;
 my $var_x = $sum2_x / $n - $mean_x*$mean_x;
 my $var_y = $sum2_y / $n - $mean_y*$mean_y;
 my $p = ($n*$sum_xy-$sum_x*$sum_y)
  /
  (   sqrt($n*$sum2_x-$sum_x*$sum_x)
	  *sqrt($n*$sum2_y-$sum_y*$sum_y));
#  printf "%.2f %.2f %.2f %.2f %.2f\n", $mean_x, $var_x, $mean_y, $var_y, $p;
 return $p;
}

my $infile = "network";
my $outfile = "network";

# retrieve network analysis binary files
my %nm = %{retrieve ("$infile.nm.bin")};
my %nw = %{retrieve ("$infile.nw.bin")}; 
my %func_defs = %{retrieve ("$infile.func_defs.bin")}; 
$func_defs{"undefined"} = "undefined";

# merge repository analysis
my %d = %{retrieve ("repo.bin")};
my %f;
for my $file (keys %d)
{
 for my $c (keys %{$d{$file}})
 {
  $f{$file}+=$c;
 }  
}
open (FILE, ">links.loc_changes.txt") or die;
print FILE "#obj_file src_file links_in links_out loc_changes\n";
foreach my $file (keys %nw)
{
 my $file1 = $file;
 $file =~ s/\.o/\.c/;
 $file =~ s/^\.\///;
 if ($f{$file})
 {
  my $loc = $f{$file};
  my $out = int(keys %{$nw{$file1}{out}});
  my $in = int(keys %{$nw{$file1}{in}});
  push (@aloc, $loc);
  push (@aout, $out);
  push (@ain, $in);
  print FILE "$file1 $file $in $out $loc\n";
 }
}
close (FILE);
printf "In - LOC %.2f\n", pear (\@ain, \@aloc);
printf "Out - LOC %.2f\n", pear (\@aout, \@aloc);
printf "Out - In %.2f\n", pear (\@aout, \@ain);


# gephi network analysis
my $nfiles = int(keys %nw);
print "#files: $nfiles\n";
open (FILE1, ">$outfile.files.csv") or die;
open (FILE2, ">$outfile.links.csv") or die;
open (FILE3, ">$outfile.numlinks.txt") or die;
open (FILE4, ">$outfile.histolinks.in.txt") or die;
open (FILE5, ">$outfile.histolinks.out.txt") or die;
print FILE1 "Id;Label\n";
print FILE2 "Source;Target;Label;Weight\n";
print FILE3 "#filename inlinks outlinks\n";
print FILE4 "#numlinks numfiles_with_numlinks\n";
print FILE5 "#numlinks numfiles_with_numlinks\n";
my %h_link;
my $i;
foreach my $file (keys %nw)
{
 print "\r",$i++," of ",int(keys %nw);
 my $label = `basename $file`;
 chomp($label);
 print FILE1 $nw{$file}{idx},";$label\n";
 my $source = $nw{$file}{idx};
 foreach my $function (keys %{$nw{$file}{out}})
 {
  if ($func_defs{$function})
  {
   my $target_name = $func_defs{$function} or "undefined";
   my $target = $nw{$target_name}{idx};
   my $label = $function;
   my $weight = 1;
	print FILE2 "$source;$target;$label;$weight\n";
  }
 }
 my $inlinks  = int(keys %{$nw{$file}{in}});
 my $outlinks = int(keys %{$nw{$file}{out}});
 print FILE3 "$file $inlinks $outlinks\n";
 $h_link{in}{$inlinks}++;
 $h_link{out}{$outlinks}++;
}
print FILE4 "$_ ",$h_link{in}{$_}," ",$h_link{in}{$_}/$nfiles,"\n" foreach (keys %{$h_link{in}});
print FILE5 "$_ ",$h_link{out}{$_}," ",$h_link{out}{$_}/$nfiles,"\n" foreach (keys %{$h_link{out}});
close (FILE1);
close (FILE2);
close (FILE3);
close (FILE4);
close (FILE5);
